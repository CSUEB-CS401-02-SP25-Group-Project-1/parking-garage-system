1: Obtain Parking Ticket	//Customer obtains ticket
Actor: Customer			//Generates new ticket
Related: 3			//numCars++

2: View Available Spaces	//Displays # of available spaces
Actor: Customer			//(total capacity) - (# cars in garage)
Related: 1

3: Pay Parking Fee		//Customer feeds ticket into machine and pays
Actor: Customer			//((current time) - (time ticket created)) * rate
Related: 1 & 5

4: Employee Login		//Employee enters login to access functions
Actor: Employee			//System.out.println("Username: ");
Related: 5 & 7			//username = scanner.nextline();
				//for (customer : listOfEmployees) {
				//	if (customer.getUserName().compareTo(username)) {
				//		return goodReturn;
				//	}
				//}

5: Override Customer Fee	//Employee charges different price than on ticket
Actor: Employee			//Should delete/validate ticket upon payment!!
Related: 3 			

6: Generate Parking Ticket	//Employee generates parking ticket
Actor: Employee			//Number of cars incremented
Related: 1 

7: View Garage Usage Report
Actor: Employee
Related: 4

8: Modify Garage Fee Rate	//Changes how much customers are charged per minute parked
Actor: Employee
Related: 4

9: Track Vehicle Entry/Exit	//I don't like this one
Actor: System			//Sensors detect vehicle entry and generate ticket
Related: 1 or 3

10: Handle Errors
Actor: System
Related: 3 & 5

11: Ensure System Security	//Password creation is ensured to be "complicated"
Actor: System
Related: 4 & 10

12: Monitor Garage Environment	//Colling sensor & lights to guide drivers
Actor: System
Related: None


"Generate Ticket" command
	- compiles 1, 6, and 9